#include <iostream>
#include <coroutine>

struct ReturnObject{
   struct promise_type{
    //promise_type() = default;  /* implicitly generated by compiler */
    std::suspend_never initial_suspend() {return {}; }
    std::suspend_never final_suspend() noexcept {return {}; }
    ReturnObject get_return_object() {return ReturnObject{std::coroutine_handle<promise_type>::from_promise(*this)}; } 
    void unhandled_exception(){}
  };
  //ReturnObject() = default;  /* implicitly generated by compiler */

  std::coroutine_handle<> handle;
  ReturnObject(std::coroutine_handle<> handle_): handle{handle_}
  {

  }
};

ReturnObject foo(){
    std::cout << "1. Hello from foo\n";
    co_await std::suspend_always{};
    std::cout << "2. Hello again from foo\n";
    co_await std::suspend_always{};
    std::cout << "3. Hello again from foo\n";
}

int main(){
  ReturnObject retObj = foo();
  retObj.handle.resume();
  //retObj.handle(); //calls std::coroutine_handle<>::operator();

  std::cout << std::boolalpha << retObj.handle.done() << "\n";
}